from burp import IBurpExtender, ITab
from burp import IHttpListener
from burp import IProxyListener
from burp import IContextMenuFactory, IBurpExtenderCallbacks, IRequestInfo
from javax.swing import JMenuItem,JPanel, JLabel, JComboBox, JTextField, SwingConstants, JButton
from java.awt import GridLayout
from java.awt.event import ActionListener
from java.io import PrintWriter
from com.ziclix.python.sql import zxJDBC

class BurpExtender(IBurpExtender,IContextMenuFactory,ActionListener,ITab, IRequestInfo, IBurpExtenderCallbacks):

    def getTabCaption(self):
        return "Pentest Collaborator"

    def getUiComponent(self):
        panel=JPanel(GridLayout(3,2))
        self._dbStringButton = JTextField('', 15)
        panel.add(JLabel('DbString:', SwingConstants.RIGHT))
        panel.add(self._dbStringButton)
        self._messageBox = JTextField('',15)
        panel.add(self._messageBox)
        button=JButton("Connect", actionPerformed=self.connectDb)
        panel.add(button)
        return panel


    def connectDb(self, event):
        dbString=self._dbStringButton.getText()
        try:
            self._conn = zxJDBC.connect("jdbc:"+dbString, None, None, "com.mysql.jdbc.Driver")
            self._messageBox.setText("Connected to db")
            self._connected=True
            cursor = self._conn.cursor()
            cursor.execute("CREATE DATABASE IF NOT EXISTS pentestCollab;")
            cursor.execute("CREATE TABLE IF NOT EXISTS request (id int not null auto_increment, path varchar(255) UNIQUE, color varchar(10),primary key(id));")
            cursor.close()
        except:
            self._messageBox.setText("Failed to connect to db")


    def registerExtenderCallbacks(self,callbacks):
        self._callbacks=callbacks
        self._helpers=callbacks.getHelpers()
        self._callbacks.setExtensionName("Pentest Collaborator")
        self._callbacks.addSuiteTab(self)
        self._callbacks.registerContextMenuFactory(self)
        self._enabled=True
        self._connected=False
        self._requestIds=[]
        return


    def createMenuItems(self, invocation):
        # Maybe check what invocation this is? e.g. CONTEXT_PROXY_HISTORY
        cursor=False
        for i in invocation.getSelectedMessages(): ## hacky hacky workaround... need to right click after all are highlighted
            color = i.getHighlight()
            if color and self._connected:
                if not cursor:
                    cursor = self._conn.cursor()
                query = "INSERT into request (Path, Color) VALUES (?,?)"
                cursor.executemany(query, [i.getUrl().toString(), color])
                self._requestIds.append(cursor.lastrowid)
        if cursor:
            self._conn.commit()
            cursor.close()
        if self._connected:
            self.updateReqs()
        return None

    def updateReqs(self):
        cursor = self._conn.cursor()
        cursor.execute("select * from request")
        requests=cursor.fetchall()
        cursor.close()
        reqs = self._callbacks.getSiteMap("")
        for i in reqs:
            url = i.getUrl().toString()
            self._callbacks.printOutput(url)
            for j in requests:
                url2 = j[1]
                self._callbacks.printOutput(url2)
                if url == url2:
                    i.setHighlight(j[2])


